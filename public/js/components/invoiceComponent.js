/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/components/invoiceComponent.js":
/*!*****************************************************!*\
  !*** ./resources/js/components/invoiceComponent.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   invoiceComponent: () => (/* binding */ invoiceComponent)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction invoiceComponent(authUserStateFromServer, panelUserColumnDisplayNames, rowsFromServer, context, selectUserFromLivewire, unitsFromServer) {\n  console.log('Units received:', unitsFromServer);\n  return {\n    rows: rowsFromServer,\n    productCode: '',\n    panelUserColumnDisplayNames: panelUserColumnDisplayNames,\n    authUserState: authUserStateFromServer,\n    selectUser: selectUserFromLivewire,\n    calculateTax: true,\n    discount: null,\n    roundOff: true,\n    taxBreakdown: '',\n    selectedProducts: [],\n    totalAmountInWords: '',\n    totalQty: null,\n    totalAmount: null,\n    roundOffAmount: null,\n    showAlert: false,\n    barcode: '',\n    productData: {},\n    checked: [],\n    context: context,\n    inputsDisabled: false,\n    articleError: false,\n    articleErrorMessage: '',\n    rateError: false,\n    articleErrors: {},\n    rateErrors: {},\n    rateErrorMessage: '',\n    units: unitsFromServer || [],\n    allChecked: false,\n    selectPage: false,\n    selectAll: false,\n    toggleAll: function toggleAll() {\n      var _this = this;\n      this.allChecked = !this.allChecked;\n      var checkboxes = document.querySelectorAll('.product-checkbox');\n      checkboxes.forEach(function (checkbox) {\n        checkbox.checked = _this.allChecked;\n\n        // Handle the checked array\n        if (_this.allChecked) {\n          if (!_this.checked.includes(checkbox.value)) {\n            _this.checked.push(checkbox.value);\n          }\n        } else {\n          _this.checked = _this.checked.filter(function (item) {\n            return item !== checkbox.value;\n          });\n        }\n      });\n      this.selectPage = this.allChecked;\n    },\n    selectUserFromOthers: function selectUserFromOthers() {\n      // Function to handle \"Others\" button click\n      this.selectedUserState = this.authUserState; // Use authUserState if \"Others\" is clicked\n      this.selectUser = true;\n    },\n    // Function to handle dynamic text based on context\n    getDynamicText: function getDynamicText(taxRate) {\n      // Check if the context is 'invoice' or 'challan'\n      if (this.context === 'invoice') {\n        return \"Sales at\";\n      } else {\n        return \"Amount at\";\n      }\n    },\n    init: function init() {\n      var _this2 = this;\n      // Listen for the 'productFound' event from Livewire\n      Livewire.on('productFound', function (product) {\n        _this2.showAlert = false; // Hide alert if product is found\n        _this2.barcode = '';\n        _this2.addProductToRow(product);\n      });\n\n      // Listen for the 'productNotFound' event from Livewire\n      Livewire.on('productNotFound', function () {\n        _this2.showAlert = true; // Show alert if product is not found\n        _this2.reinitializeAlpine();\n      });\n\n      // Add event listener for Livewire updates\n      document.addEventListener('livewire:load', function () {\n        Livewire.hook('message.processed', function (message, component) {\n          if (component.el.id === 'invoice-component') {\n            Alpine.initializeComponent(component.el);\n          }\n        });\n      });\n\n      // Add listener for checkbox changes\n      document.addEventListener('change', function (event) {\n        if (event.target.classList.contains('product-checkbox')) {\n          _this2.handleCheckboxChange(event, event.target.value);\n        }\n      });\n    },\n    reinitializeComponent: function reinitializeComponent() {\n      var _this3 = this;\n      // Reinitialize Alpine bindings\n      this.$nextTick(function () {\n        _this3.rows = _toConsumableArray(_this3.rows);\n        _this3.updateTotals();\n      });\n    },\n    addProductToRow: function addProductToRow(product) {\n      var _this4 = this;\n      // Check if the product already exists in the rows\n      var targetRow = this.rows.find(function (row) {\n        return row.item_code === product.item_code;\n      });\n      if (targetRow) {\n        // If the product exists, update the quantity and other details\n        targetRow.quantity += product.qty || 1; // Increment the quantity\n        targetRow.rate = product.rate || targetRow.rate; // Update the rate if provided\n        targetRow.item_code = product.item_code; // Ensure item_code is updated\n\n        // Update detailed product data if details exist\n        if (Array.isArray(product.details)) {\n          product.details.forEach(function (detail) {\n            var trimmedColumnName = detail.column_name.trim();\n            var trimmedPanelColumnNames = _this4.panelUserColumnDisplayNames.map(function (name) {\n              return name.trim();\n            });\n            if (trimmedPanelColumnNames.includes(trimmedColumnName)) {\n              targetRow[trimmedColumnName] = detail.column_value;\n            }\n          });\n        }\n      } else {\n        // If the product does not exist, find an empty row or add a new row\n        targetRow = this.rows.find(function (row) {\n          return !row.item_code && !row.quantity && !row.rate;\n        }) || this.addRow();\n\n        // Assign basic product data to the target row\n        targetRow.item_code = product.item_code; // Ensure item_code is assigned\n        targetRow.quantity = product.qty || 1;\n        targetRow.rate = product.rate || 0;\n\n        // Assign detailed product data if details exist\n        if (Array.isArray(product.details)) {\n          product.details.forEach(function (detail) {\n            var trimmedColumnName = detail.column_name.trim();\n            if (_this4.panelUserColumnDisplayNames.includes(trimmedColumnName)) {\n              targetRow[trimmedColumnName] = detail.column_value;\n            }\n          });\n        }\n\n        // Ensure all columns in panelUserColumnDisplayNames are populated\n        this.panelUserColumnDisplayNames.filter(function (columnName) {\n          return columnName.trim() !== '';\n        }).forEach(function (columnName) {\n          var trimmedColumnName = columnName.trim();\n          if (product[trimmedColumnName] !== undefined) {\n            targetRow[trimmedColumnName] = product[trimmedColumnName];\n          }\n        });\n      }\n\n      // Calculate total for the target row\n      this.calculateTotal(targetRow);\n\n      // Log the updated row for debugging\n      console.log('Updated row:', targetRow);\n    },\n    addRow: function addRow() {\n      console.log(this.panelUserColumnDisplayNames, 'panelUserColumnDisplayNames');\n      var dynamicFields = this.panelUserColumnDisplayNames.reduce(function (acc, columnName) {\n        if (columnName !== '') {\n          acc[columnName] = '';\n        }\n        return acc;\n      }, {});\n      var staticFields = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({\n        item_code: null,\n        quantity: null\n      }, \"item_code\", null), \"rate\", null), \"tax\", null), \"calculateTax\", true), \"total\", null);\n      var newRow = _objectSpread(_objectSpread({}, dynamicFields), staticFields);\n      this.rows.push(newRow);\n      return newRow;\n    },\n    addSelectedProducts: function addSelectedProducts() {\n      var _this5 = this;\n      this.selectedProducts.forEach(function (product) {\n        var emptyRow = _this5.rows.find(function (row) {\n          return !row.quantity && !row.rate && !row.item_code;\n        });\n        if (emptyRow) {\n          emptyRow.item_code = product.item_code;\n          emptyRow.quantity = product.qty;\n          emptyRow.rate = product.rate;\n          emptyRow.total = product.qty * product.rate;\n        } else {\n          var newRow = {\n            item_code: product.item_code,\n            quantity: product.qty,\n            rate: product.rate,\n            tax: 0,\n            calculateTax: true,\n            total: product.qty * product.rate\n          };\n          _this5.rows.push(newRow);\n        }\n      });\n    },\n    deleteRow: function deleteRow(index) {\n      this.rows.splice(index, 1);\n      this.updateTotals();\n    },\n    calculateTotal: function calculateTotal(row) {\n      var quantity = parseFloat(row.quantity) || 0;\n      var rate = parseFloat(row.rate) || 0;\n      var tax = parseFloat(row.tax) || 0;\n\n      // Calculate total without tax\n      var total = quantity * rate;\n\n      // Apply tax if enabled\n      if (this.calculateTax) {\n        total += total * tax / 100;\n      }\n\n      // Set total for the row\n      row.total = total.toFixed(2);\n\n      // Recalculate totals\n      this.updateTotals();\n      return row.total;\n    },\n    totalQuantity: function totalQuantity() {\n      return this.rows.reduce(function (sum, row) {\n        return sum + (parseFloat(row.quantity) || 0);\n      }, 0);\n    },\n    totalAmountBeforeDiscount: function totalAmountBeforeDiscount() {\n      return this.rows.reduce(function (sum, row) {\n        return sum + (parseFloat(row.total) || 0);\n      }, 0);\n    },\n    updateTotals: function updateTotals() {\n      // Recalculate the total quantity\n      this.totalQty = this.totalQuantity();\n\n      // Calculate total amount before any discount or round-off\n      var totalAmount = this.totalAmountBeforeDiscount();\n\n      // Apply global discount\n      var discount = parseFloat(this.discount) || 0;\n      var discountAmount = totalAmount * discount / 100;\n      totalAmount -= discountAmount;\n\n      // Apply round-off if enabled\n      this.roundOffAmount = 0;\n      if (this.roundOff) {\n        this.roundOffAmount = Math.round(totalAmount) - totalAmount;\n        totalAmount = Math.round(totalAmount);\n      }\n      this.totalAmount = totalAmount.toFixed(2);\n\n      // Update tax breakdown\n      this.generateTaxBreakdown();\n\n      // Convert to words\n      this.totalAmountInWords = this.numberToIndianRupees(totalAmount);\n    },\n    generateTaxBreakdown: function generateTaxBreakdown() {\n      var breakdown = '';\n      var discount = parseFloat(this.discount) || 0;\n      var showBreakdown = false;\n\n      // Ensure selectedUserState uses authUserState if undefined or empty\n      var selectedState = typeof selectedUserState !== 'undefined' && selectedUserState.trim() !== '' ? selectedUserState.trim().toLowerCase() : this.authUserState.trim().toLowerCase();\n      var authState = this.authUserState.trim().toLowerCase();\n\n      // Determine if IGST should be applied\n      var applyIGST = selectedState !== authState;\n\n      // Aggregate data by tax rate\n      var taxData = {};\n      this.rows.forEach(function (row) {\n        var taxRate = parseFloat(row.tax) || 0;\n        if (taxRate === 0) return; // Skip rows with zero tax rate\n\n        var totalWithoutTax = parseFloat(row.total) / (1 + taxRate / 100);\n        var discountedTotal = totalWithoutTax - totalWithoutTax * discount / 100;\n        var taxAmount = discountedTotal * (taxRate / 100);\n        if (!taxData[taxRate]) {\n          taxData[taxRate] = {\n            totalWithoutTax: 0,\n            discountedTotal: 0,\n            taxAmount: 0\n          };\n        }\n        taxData[taxRate].totalWithoutTax += totalWithoutTax;\n        taxData[taxRate].discountedTotal += discountedTotal;\n        taxData[taxRate].taxAmount += taxAmount;\n      });\n      // Generate breakdown HTML\n      for (var _i = 0, _Object$entries = Object.entries(taxData); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          taxRate = _Object$entries$_i[0],\n          data = _Object$entries$_i[1];\n        if (discount > 0 || data.totalWithoutTax > 0) {\n          showBreakdown = true;\n          breakdown += \"\\n                                    <tr class=\\\"text-xs text-black\\\">\\n                                        <td class=\\\"text-right\\\">\".concat(this.getDynamicText(taxRate), \" \").concat(taxRate, \"%:</td>\\n                                        <td class=\\\"text-right\\\">\").concat(data.totalWithoutTax.toFixed(2), \"</td>\\n                                    </tr>\\n                                    \").concat(discount > 0 ? \"\\n                                    <tr class=\\\"text-xs text-black\\\">\\n                                        <td class=\\\"text-right\\\">Discount at \".concat(discount, \"%:</td>\\n                                        <td class=\\\"text-right\\\">\").concat((data.totalWithoutTax * discount / 100).toFixed(2), \"</td>\\n                                    </tr>\\n                                    <tr class=\\\"text-xs text-black\\\">\\n                                        <td class=\\\"text-right font-bold\\\">\").concat(this.getDynamicText(taxRate), \" \").concat(discount, \"%:</td>\\n                                        <td class=\\\"text-right font-bold\\\">\").concat(data.discountedTotal.toFixed(2), \"</td>\\n                                    </tr>\\n                                    \") : '', \"\\n                                    \").concat(data.totalWithoutTax > 0 ? applyIGST ? \"\\n                                        <tr class=\\\"text-xs text-black\\\">\\n                                            <td class=\\\"text-right\\\">IGST \".concat(taxRate, \"%:</td>\\n                                            <td class=\\\"text-right\\\">\").concat(data.taxAmount.toFixed(2), \"</td>\\n                                        </tr>\\n                                        \") : \"\\n                                        <tr class=\\\"text-xs text-black\\\">\\n                                            <td class=\\\"text-right\\\">SGST \".concat((taxRate / 2).toFixed(2), \"%:</td>\\n                                            <td class=\\\"text-right\\\">\").concat((data.taxAmount / 2).toFixed(2), \"</td>\\n                                        </tr>\\n                                        <tr class=\\\"text-xs text-black\\\">\\n                                            <td class=\\\"text-right\\\">CGST \").concat((taxRate / 2).toFixed(2), \"%:</td>\\n                                            <td class=\\\"text-right\\\">\").concat((data.taxAmount / 2).toFixed(2), \"</td>\\n                                        </tr>\\n                                        \") : '', \"\\n                                    <tr class=\\\"text-xs text-black\\\">\\n                                        <td colspan=\\\"2\\\" style=\\\"height: 10px;\\\"></td>\\n                                    </tr>\\n                                \");\n        }\n      }\n\n      // Handle case where only discount is applied\n      if (discount > 0 && Object.keys(taxData).length === 0) {\n        showBreakdown = true;\n        var totalAmountBeforeDiscount = this.totalAmountBeforeDiscount();\n        breakdown += \"\\n                                <tr class=\\\"text-xs text-black\\\">\\n                                    <td class=\\\"text-right\\\">Total Amount:</td>\\n                                    <td class=\\\"text-right\\\">\".concat(totalAmountBeforeDiscount.toFixed(2), \"</td>\\n                                </tr>\\n                                <tr class=\\\"text-xs text-black\\\">\\n                                    <td class=\\\"text-right\\\">Discount at \").concat(discount, \"%:</td>\\n                                    <td class=\\\"text-right\\\">\").concat((totalAmountBeforeDiscount * discount / 100).toFixed(2), \"</td>\\n                                </tr>\\n                                <tr class=\\\"text-xs text-black\\\">\\n                                    <td class=\\\"text-right font-bold\\\">Amount at \").concat(discount, \"%:</td>\\n                                    <td class=\\\"text-right font-bold\\\">\").concat((totalAmountBeforeDiscount - totalAmountBeforeDiscount * discount / 100).toFixed(2), \"</td>\\n                                </tr>\\n                            \");\n      }\n      if (showBreakdown) {\n        this.taxBreakdown = \"\\n                                <table class=\\\"w-full\\\">\\n                                    \".concat(breakdown, \"\\n                                </table>\\n                            \");\n      } else {\n        this.taxBreakdown = '';\n      }\n    },\n    convertNumberToWords: function convertNumberToWords(number) {\n      var words = {\n        0: 'Zero',\n        1: 'One',\n        2: 'Two',\n        3: 'Three',\n        4: 'Four',\n        5: 'Five',\n        6: 'Six',\n        7: 'Seven',\n        8: 'Eight',\n        9: 'Nine',\n        10: 'Ten',\n        11: 'Eleven',\n        12: 'Twelve',\n        13: 'Thirteen',\n        14: 'Fourteen',\n        15: 'Fifteen',\n        16: 'Sixteen',\n        17: 'Seventeen',\n        18: 'Eighteen',\n        19: 'Nineteen',\n        20: 'Twenty',\n        30: 'Thirty',\n        40: 'Forty',\n        50: 'Fifty',\n        60: 'Sixty',\n        70: 'Seventy',\n        80: 'Eighty',\n        90: 'Ninety'\n      };\n      if (number < 21) {\n        return words[number];\n      } else if (number < 100) {\n        var tens = words[10 * Math.floor(number / 10)];\n        var units = number % 10;\n        return tens + (units ? ' ' + words[units] : '');\n      } else if (number < 1000) {\n        var hundreds = words[Math.floor(number / 100)] + ' Hundred';\n        var remainder = number % 100;\n        return hundreds + (remainder ? ' and ' + this.convertNumberToWords(remainder) : '');\n      } else if (number < 100000) {\n        var thousands = this.convertNumberToWords(Math.floor(number / 1000)) + ' Thousand';\n        var _remainder = number % 1000;\n        return thousands + (_remainder ? ' ' + this.convertNumberToWords(_remainder) : '');\n      } else if (number < 10000000) {\n        var lakhs = this.convertNumberToWords(Math.floor(number / 100000)) + ' Lakh';\n        var _remainder2 = number % 100000;\n        return lakhs + (_remainder2 ? ' ' + this.convertNumberToWords(_remainder2) : '');\n      } else {\n        var crores = this.convertNumberToWords(Math.floor(number / 10000000)) + ' Crore';\n        var _remainder3 = number % 10000000;\n        return crores + (_remainder3 ? ' ' + this.convertNumberToWords(_remainder3) : '');\n      }\n    },\n    numberToIndianRupees: function numberToIndianRupees(number) {\n      var amountInWords = this.convertNumberToWords(Math.floor(number));\n      var decimalPart = Math.round((number - Math.floor(number)) * 100);\n      if (decimalPart > 0) {\n        var decimalInWords = this.convertNumberToWords(decimalPart);\n        return amountInWords + ' Rupees and ' + decimalInWords + ' Paisa';\n      } else {\n        return amountInWords + ' Rupees';\n      }\n    },\n    validateArticle: function validateArticle(row) {\n      if (!row.Article || row.Article.trim() === '') {\n        this.articleErrors[row.id] = 'Required';\n      } else {\n        delete this.articleErrors[row.id];\n      }\n    },\n    validateRate: function validateRate(row) {\n      if (!row.rate || isNaN(parseFloat(row.rate)) || parseFloat(row.rate) <= 0) {\n        this.rateErrors[row.id] = 'Required';\n      } else {\n        delete this.rateErrors[row.id];\n      }\n    },\n    validateRow: function validateRow(row) {\n      this.validateArticle(row);\n      this.validateRate(row);\n    },\n    validateAllRows: function validateAllRows() {\n      var _this6 = this;\n      this.rows.forEach(function (row) {\n        return _this6.validateRow(row);\n      });\n    },\n    isFormValid: function isFormValid() {\n      return Object.keys(this.articleErrors).length === 0 && Object.keys(this.rateErrors).length === 0;\n    },\n    draftData: function draftData() {\n      var _this7 = this;\n      var formattedData = this.rows.map(function (row) {\n        var columns = Object.entries(row).filter(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            _ = _ref2[1];\n          return _this7.panelUserColumnDisplayNames.includes(key);\n        }).map(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n            key = _ref4[0],\n            value = _ref4[1];\n          return {\n            column_name: key,\n            column_value: value\n          };\n        });\n        return {\n          p_id: row.item_code || '',\n          unit: row.unit || null,\n          rate: parseFloat(row.rate) || null,\n          qty: parseFloat(row.quantity) || null,\n          round_off: null,\n          discount: null,\n          total_amount: parseFloat(row.total) || null,\n          tax_percentage: parseFloat(row.tax) || null,\n          discount_total_amount: null,\n          tax_amount: null,\n          tax: parseFloat(row.tax) || null,\n          item_code: row.item_code || null,\n          columns: columns\n        };\n      });\n      var requestData = {\n        order_details: formattedData,\n        total_qty: this.totalQty,\n        total: this.totalAmount,\n        discount_total_amount: this.discount\n      };\n      this.$wire.draftRows(requestData);\n    },\n    submitData: function submitData() {\n      var _this8 = this;\n      var formattedData = this.rows.map(function (row) {\n        var columns = Object.entries(row).filter(function (_ref5) {\n          var _ref6 = _slicedToArray(_ref5, 2),\n            key = _ref6[0],\n            _ = _ref6[1];\n          return _this8.panelUserColumnDisplayNames.includes(key);\n        }).map(function (_ref7) {\n          var _ref8 = _slicedToArray(_ref7, 2),\n            key = _ref8[0],\n            value = _ref8[1];\n          return {\n            column_name: key,\n            column_value: value\n          };\n        });\n        return {\n          p_id: row.item_code || '',\n          unit: row.unit || null,\n          rate: parseFloat(row.rate) || null,\n          qty: parseFloat(row.quantity) || null,\n          round_off: null,\n          discount: null,\n          total_amount: parseFloat(row.total) || null,\n          tax_percentage: parseFloat(row.tax) || null,\n          discount_total_amount: null,\n          tax_amount: null,\n          tax: parseFloat(row.tax) || null,\n          item_code: row.item_code || null,\n          columns: columns\n        };\n      });\n      var requestData = {\n        order_details: formattedData,\n        total_qty: this.totalQty,\n        total: this.totalAmount,\n        discount_total_amount: this.discount\n      };\n      this.$wire.saveRows(requestData);\n    },\n    editData: function editData() {\n      var _this9 = this;\n      var formattedData = this.rows.map(function (row) {\n        var columns = Object.entries(row).filter(function (_ref9) {\n          var _ref10 = _slicedToArray(_ref9, 2),\n            key = _ref10[0],\n            _ = _ref10[1];\n          return _this9.panelUserColumnDisplayNames.includes(key);\n        }).map(function (_ref11) {\n          var _ref12 = _slicedToArray(_ref11, 2),\n            key = _ref12[0],\n            value = _ref12[1];\n          return {\n            column_name: key,\n            column_value: value\n          };\n        });\n        return {\n          p_id: row.item_code || '',\n          unit: null,\n          rate: parseFloat(row.rate) || null,\n          qty: parseFloat(row.quantity) || null,\n          round_off: null,\n          discount: null,\n          total_amount: parseFloat(row.total) || null,\n          tax_percentage: parseFloat(row.tax) || null,\n          discount_total_amount: null,\n          tax_amount: null,\n          tax: parseFloat(row.tax) || null,\n          item_code: null,\n          columns: columns\n        };\n      });\n      var requestData = {\n        order_details: formattedData,\n        total_qty: this.totalQty,\n        total: this.totalAmount,\n        discount_total_amount: this.discount\n      };\n      this.$wire.editRows(requestData);\n    },\n    // Updated addSelectedDataToInputs for multiple select\n    addSelectedDataToInputs: function addSelectedDataToInputs() {\n      var _this10 = this;\n      if (!this.checked.length) {\n        console.log('No items selected');\n        return;\n      }\n\n      // Process each checked item\n      this.checked.forEach(function (checkedItem) {\n        try {\n          var productData = JSON.parse(checkedItem);\n          console.log('Processing product:', productData);\n\n          // Check if product already exists\n          var targetRow = _this10.rows.find(function (row) {\n            return row.item_code === productData.item_code;\n          });\n          if (targetRow) {\n            console.log(\"Product \".concat(productData.item_code, \" already exists, skipping\"));\n            return;\n          }\n\n          // Find empty row or create new one\n          targetRow = _this10.rows.find(function (row) {\n            return !row.item_code && !row.quantity && !row.rate;\n          }) || _this10.addRow();\n\n          // Basic data assignment\n          targetRow.item_code = productData.item_code;\n          targetRow.quantity = productData.qty || 1;\n          targetRow.rate = productData.rate || 0;\n\n          // Process detailed product data\n          if (Array.isArray(productData.details)) {\n            productData.details.forEach(function (detail) {\n              var trimmedColumnName = detail.column_name.trim();\n              if (_this10.panelUserColumnDisplayNames.includes(trimmedColumnName)) {\n                targetRow[trimmedColumnName] = detail.column_value;\n              }\n            });\n          }\n\n          // Ensure all panel columns are populated\n          _this10.panelUserColumnDisplayNames.filter(function (columnName) {\n            return columnName.trim() !== '';\n          }).forEach(function (columnName) {\n            var trimmedColumnName = columnName.trim();\n            if (productData[trimmedColumnName] !== undefined) {\n              targetRow[trimmedColumnName] = productData[trimmedColumnName];\n            }\n          });\n\n          // Handle unit assignment\n          if (productData.unit) {\n            var unitShortName = productData.unit.toUpperCase();\n            if (_this10.units.length === 0 || !_this10.units.some(function (unit) {\n              return unit.short_name === unitShortName;\n            })) {\n              _this10.units.push({\n                short_name: unitShortName,\n                unit: productData.unit\n              });\n            }\n            targetRow.unit = unitShortName;\n          }\n\n          // Calculate totals\n          _this10.calculateTotal(targetRow);\n        } catch (error) {\n          console.error('Error processing product:', error);\n        }\n      });\n\n      // Clear selections and update UI\n      this.checked = [];\n      this.allChecked = false;\n      this.selectPage = false;\n\n      // Force re-render\n      this.$nextTick(function () {\n        _this10.rows = _toConsumableArray(_this10.rows);\n        _this10.updateTotals();\n      });\n    },\n    // Helper method to handle individual checkbox changes\n    handleCheckboxChange: function handleCheckboxChange(event, value) {\n      if (event.target.checked) {\n        if (!this.checked.includes(value)) {\n          this.checked.push(value);\n        }\n      } else {\n        this.checked = this.checked.filter(function (item) {\n          return item !== value;\n        });\n        this.allChecked = false;\n      }\n\n      // Update allChecked state based on if all checkboxes are checked\n      var checkboxes = document.querySelectorAll('.product-checkbox');\n      this.allChecked = Array.from(checkboxes).every(function (checkbox) {\n        return checkbox.checked;\n      });\n    },\n    logProductData: function logProductData() {\n      console.log(this.productData);\n    },\n    sendData: function sendData() {\n      this.logProductData();\n      var inputField = document.getElementById('productDataInput');\n      inputField.value = JSON.stringify(this.productData);\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9pbnZvaWNlQ29tcG9uZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU8sU0FBU0EsZ0JBQWdCQSxDQUFDQyx1QkFBdUIsRUFBRUMsMkJBQTJCLEVBQUVDLGNBQWMsRUFBRUMsT0FBTyxFQUFFQyxzQkFBc0IsRUFBRUMsZUFBZSxFQUFFO0VBQ3JKQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRUYsZUFBZSxDQUFDO0VBQy9DLE9BQU87SUFDSEcsSUFBSSxFQUFFTixjQUFjO0lBQ3BCTyxXQUFXLEVBQUUsRUFBRTtJQUNmUiwyQkFBMkIsRUFBRUEsMkJBQTJCO0lBQ3hEUyxhQUFhLEVBQUVWLHVCQUF1QjtJQUN0Q1csVUFBVSxFQUFFUCxzQkFBc0I7SUFDbENRLFlBQVksRUFBRSxJQUFJO0lBQ2xCQyxRQUFRLEVBQUUsSUFBSTtJQUNkQyxRQUFRLEVBQUUsSUFBSTtJQUNkQyxZQUFZLEVBQUUsRUFBRTtJQUNoQkMsZ0JBQWdCLEVBQUUsRUFBRTtJQUNwQkMsa0JBQWtCLEVBQUUsRUFBRTtJQUN0QkMsUUFBUSxFQUFFLElBQUk7SUFDZEMsV0FBVyxFQUFFLElBQUk7SUFDakJDLGNBQWMsRUFBRSxJQUFJO0lBQ3BCQyxTQUFTLEVBQUUsS0FBSztJQUNoQkMsT0FBTyxFQUFFLEVBQUU7SUFDWEMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUNmQyxPQUFPLEVBQUUsRUFBRTtJQUNYckIsT0FBTyxFQUFFQSxPQUFPO0lBQ2hCc0IsY0FBYyxFQUFFLEtBQUs7SUFDckJDLFlBQVksRUFBRSxLQUFLO0lBQ25CQyxtQkFBbUIsRUFBRSxFQUFFO0lBQ3ZCQyxTQUFTLEVBQUUsS0FBSztJQUNoQkMsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUNqQkMsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNkQyxnQkFBZ0IsRUFBRSxFQUFFO0lBQ3BCQyxLQUFLLEVBQUUzQixlQUFlLElBQUksRUFBRTtJQUM1QjRC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O1FBQ0gsSUFBSSxDQUFDcEIsT0FBTyxHQUFHLElBQUksQ0FBQ0EsT0FBTyxDQUFDc0IsTUFBTSxDQUFDLFVBQUFDLElBQUk7VUFBQSxPQUFJQSxJQUFJLEtBQUtILEtBQUs7UUFBQSxFQUFDO1FBQzFELElBQUksQ0FBQ1gsVUFBVSxHQUFHLEtBQUs7TUFDM0I7O01BRUE7TUFDQSxJQUFNSyxVQUFVLEdBQUdDLFFBQVEsQ0FBQ0MsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUM7TUFDakUsSUFBSSxDQUFDUCxVQUFVLEdBQUdvRCxLQUFLLENBQUMrSCxJQUFJLENBQUM5SyxVQUFVLENBQUMsQ0FBQytLLEtBQUssQ0FBQyxVQUFBM0ssUUFBUTtRQUFBLE9BQUlBLFFBQVEsQ0FBQ2xCLE9BQU87TUFBQSxFQUFDO0lBQ2hGLENBQUM7SUFHRzhMLGNBQWMsV0FBQUEsZUFBQSxFQUFHO01BQ2JoTixPQUFPLENBQUNDLEdBQUcsQ0FBQyxJQUFJLENBQUNnQixXQUFXLENBQUM7SUFDakMsQ0FBQztJQUVEZ00sUUFBUSxXQUFBQSxTQUFBLEVBQUc7TUFDUCxJQUFJLENBQUNELGNBQWMsQ0FBQyxDQUFDO01BQ3JCLElBQU1FLFVBQVUsR0FBR2pMLFFBQVEsQ0FBQ2tMLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQztNQUM5REQsVUFBVSxDQUFDNUssS0FBSyxHQUFHaUssSUFBSSxDQUFDYSxTQUFTLENBQUMsSUFBSSxDQUFDbk0sV0FBVyxDQUFDO0lBQ3ZEO0VBQ1IsQ0FBQztBQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlcGFyY2hpLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvaW52b2ljZUNvbXBvbmVudC5qcz9hNWEzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpbnZvaWNlQ29tcG9uZW50KGF1dGhVc2VyU3RhdGVGcm9tU2VydmVyLCBwYW5lbFVzZXJDb2x1bW5EaXNwbGF5TmFtZXMsIHJvd3NGcm9tU2VydmVyLCBjb250ZXh0LCBzZWxlY3RVc2VyRnJvbUxpdmV3aXJlLCB1bml0c0Zyb21TZXJ2ZXIpIHtcbiAgICBjb25zb2xlLmxvZygnVW5pdHMgcmVjZWl2ZWQ6JywgdW5pdHNGcm9tU2VydmVyKTtcbiAgICByZXR1cm4ge1xuICAgICAgICByb3dzOiByb3dzRnJvbVNlcnZlcixcbiAgICAgICAgcHJvZHVjdENvZGU6ICcnLFxuICAgICAgICBwYW5lbFVzZXJDb2x1bW5EaXNwbGF5TmFtZXM6IHBhbmVsVXNlckNvbHVtbkRpc3BsYXlOYW1lcyxcbiAgICAgICAgYXV0aFVzZXJTdGF0ZTogYXV0aFVzZXJTdGF0ZUZyb21TZXJ2ZXIsXG4gICAgICAgIHNlbGVjdFVzZXI6IHNlbGVjdFVzZXJGcm9tTGl2ZXdpcmUsXG4gICAgICAgIGNhbGN1bGF0ZVRheDogdHJ1ZSxcbiAgICAgICAgZGlzY291bnQ6IG51bGwsXG4gICAgICAgIHJvdW5kT2ZmOiB0cnVlLFxuICAgICAgICB0YXhCcmVha2Rvd246ICcnLFxuICAgICAgICBzZWxlY3RlZFByb2R1Y3RzOiBbXSxcbiAgICAgICAgdG90YWxBbW91bnRJbldvcmRzOiAnJyxcbiAgICAgICAgdG90YWxRdHk6IG51bGwsXG4gICAgICAgIHRvdGFsQW1vdW50OiBudWxsLFxuICAgICAgICByb3VuZE9mZkFtb3VudDogbnVsbCxcbiAgICAgICAgc2hvd0FsZXJ0OiBmYWxzZSxcbiAgICAgICAgYmFyY29kZTogJycsXG4gICAgICAgIHByb2R1Y3REYXRhOiB7fSxcbiAgICAgICAgY2hlY2tlZDogW10sXG4gICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgIGlucHV0c0Rpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgYXJ0aWNsZUVycm9yOiBmYWxzZSxcbiAgICAgICAgYXJ0aWNsZUVycm9yTWVzc2FnZTogJycsXG4gICAgICAgIHJhdGVFcnJvcjogZmFsc2UsXG4gICAgICAgIGFydGljbGVFcnJvcnM6IHt9LFxuICAgICAgICByYXRlRXJyb3JzOiB7fSxcbiAgICAgICAgcmF0ZUVycm9yTWVzc2FnZTogJycsXG4gICAgICAgIHVuaXRzOiB1bml0c0Zyb21TZXJ2ZXIgfHwgW10sXG4gICAgICAgIGFsbENoZWNrZWQ6IGZhbHNlLFxuICAgICAgICBzZWxlY3RQYWdlOiBmYWxzZSxcbiAgICAgICAgc2VsZWN0QWxsOiBmYWxzZSxcblxuICAgICAgICB0b2dnbGVBbGwoKSB7XG4gICAgICAgICAgICB0aGlzLmFsbENoZWNrZWQgPSAhdGhpcy5hbGxDaGVja2VkO1xuXG4gICAgICAgICAgICBjb25zdCBjaGVja2JveGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByb2R1Y3QtY2hlY2tib3gnKTtcbiAgICAgICAgICAgIGNoZWNrYm94ZXMuZm9yRWFjaChjaGVja2JveCA9PiB7XG4gICAgICAgICAgICAgICAgY2hlY2tib3guY2hlY2tlZCA9IHRoaXMuYWxsQ2hlY2tlZDtcblxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY2hlY2tlZCBhcnJheVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFsbENoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNoZWNrZWQuaW5jbHVkZXMoY2hlY2tib3gudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWQucHVzaChjaGVja2JveC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWQgPSB0aGlzLmNoZWNrZWQuZmlsdGVyKGl0ZW0gPT4gaXRlbSAhPT0gY2hlY2tib3gudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLnNlbGVjdFBhZ2UgPSB0aGlzLmFsbENoZWNrZWQ7XG4gICAgICAgIH0sXG5cblxuICAgICAgICAgICAgc2VsZWN0VXNlckZyb21PdGhlcnMoKSB7XG4gICAgICAgICAgICAgICAgLy8gRnVuY3Rpb24gdG8gaGFuZGxlIFwiT3RoZXJzXCIgYnV0dG9uIGNsaWNrXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFVzZXJTdGF0ZSA9IHRoaXMuYXV0aFVzZXJTdGF0ZTsgIC8vIFVzZSBhdXRoVXNlclN0YXRlIGlmIFwiT3RoZXJzXCIgaXMgY2xpY2tlZFxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0VXNlciA9IHRydWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gRnVuY3Rpb24gdG8gaGFuZGxlIGR5bmFtaWMgdGV4dCBiYXNlZCBvbiBjb250ZXh0XG4gICAgICAgICAgICBnZXREeW5hbWljVGV4dCh0YXhSYXRlKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNvbnRleHQgaXMgJ2ludm9pY2UnIG9yICdjaGFsbGFuJ1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQgPT09ICdpbnZvaWNlJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYFNhbGVzIGF0YDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYEFtb3VudCBhdGA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuXG5cbiAgICAgICAgICAgIGluaXQoKSB7XG4gICAgICAgICAgICAgICAgLy8gTGlzdGVuIGZvciB0aGUgJ3Byb2R1Y3RGb3VuZCcgZXZlbnQgZnJvbSBMaXZld2lyZVxuICAgICAgICAgICAgICAgIExpdmV3aXJlLm9uKCdwcm9kdWN0Rm91bmQnLCAocHJvZHVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dBbGVydCA9IGZhbHNlOyAvLyBIaWRlIGFsZXJ0IGlmIHByb2R1Y3QgaXMgZm91bmRcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXJjb2RlID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkUHJvZHVjdFRvUm93KHByb2R1Y3QpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gTGlzdGVuIGZvciB0aGUgJ3Byb2R1Y3ROb3RGb3VuZCcgZXZlbnQgZnJvbSBMaXZld2lyZVxuICAgICAgICAgICAgICAgIExpdmV3aXJlLm9uKCdwcm9kdWN0Tm90Rm91bmQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0FsZXJ0ID0gdHJ1ZTsgLy8gU2hvdyBhbGVydCBpZiBwcm9kdWN0IGlzIG5vdCBmb3VuZFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlaW5pdGlhbGl6ZUFscGluZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gQWRkIGV2ZW50IGxpc3RlbmVyIGZvciBMaXZld2lyZSB1cGRhdGVzXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbGl2ZXdpcmU6bG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgTGl2ZXdpcmUuaG9vaygnbWVzc2FnZS5wcm9jZXNzZWQnLCAobWVzc2FnZSwgY29tcG9uZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50LmVsLmlkID09PSAnaW52b2ljZS1jb21wb25lbnQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQWxwaW5lLmluaXRpYWxpemVDb21wb25lbnQoY29tcG9uZW50LmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBBZGQgbGlzdGVuZXIgZm9yIGNoZWNrYm94IGNoYW5nZXNcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3Byb2R1Y3QtY2hlY2tib3gnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVDaGVja2JveENoYW5nZShldmVudCwgZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlaW5pdGlhbGl6ZUNvbXBvbmVudCgpIHtcbiAgICAgICAgICAgICAgICAvLyBSZWluaXRpYWxpemUgQWxwaW5lIGJpbmRpbmdzXG4gICAgICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvd3MgPSBbLi4udGhpcy5yb3dzXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVUb3RhbHMoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG5cblxuICAgICAgICAgICAgYWRkUHJvZHVjdFRvUm93KHByb2R1Y3QpIHtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgcHJvZHVjdCBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgcm93c1xuICAgICAgICAgICAgICAgIGxldCB0YXJnZXRSb3cgPSB0aGlzLnJvd3MuZmluZChyb3cgPT4gcm93Lml0ZW1fY29kZSA9PT0gcHJvZHVjdC5pdGVtX2NvZGUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldFJvdykge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcHJvZHVjdCBleGlzdHMsIHVwZGF0ZSB0aGUgcXVhbnRpdHkgYW5kIG90aGVyIGRldGFpbHNcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Um93LnF1YW50aXR5ICs9IHByb2R1Y3QucXR5IHx8IDE7IC8vIEluY3JlbWVudCB0aGUgcXVhbnRpdHlcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Um93LnJhdGUgPSBwcm9kdWN0LnJhdGUgfHwgdGFyZ2V0Um93LnJhdGU7IC8vIFVwZGF0ZSB0aGUgcmF0ZSBpZiBwcm92aWRlZFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRSb3cuaXRlbV9jb2RlID0gcHJvZHVjdC5pdGVtX2NvZGU7IC8vIEVuc3VyZSBpdGVtX2NvZGUgaXMgdXBkYXRlZFxuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBkZXRhaWxlZCBwcm9kdWN0IGRhdGEgaWYgZGV0YWlscyBleGlzdFxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9kdWN0LmRldGFpbHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0LmRldGFpbHMuZm9yRWFjaChkZXRhaWwgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyaW1tZWRDb2x1bW5OYW1lID0gZGV0YWlsLmNvbHVtbl9uYW1lLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmltbWVkUGFuZWxDb2x1bW5OYW1lcyA9IHRoaXMucGFuZWxVc2VyQ29sdW1uRGlzcGxheU5hbWVzLm1hcChuYW1lID0+IG5hbWUudHJpbSgpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmltbWVkUGFuZWxDb2x1bW5OYW1lcy5pbmNsdWRlcyh0cmltbWVkQ29sdW1uTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Um93W3RyaW1tZWRDb2x1bW5OYW1lXSA9IGRldGFpbC5jb2x1bW5fdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcHJvZHVjdCBkb2VzIG5vdCBleGlzdCwgZmluZCBhbiBlbXB0eSByb3cgb3IgYWRkIGEgbmV3IHJvd1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRSb3cgPSB0aGlzLnJvd3MuZmluZChyb3cgPT4gIXJvdy5pdGVtX2NvZGUgJiYgIXJvdy5xdWFudGl0eSAmJiAhcm93LnJhdGUpIHx8IHRoaXMuYWRkUm93KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQXNzaWduIGJhc2ljIHByb2R1Y3QgZGF0YSB0byB0aGUgdGFyZ2V0IHJvd1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRSb3cuaXRlbV9jb2RlID0gcHJvZHVjdC5pdGVtX2NvZGU7IC8vIEVuc3VyZSBpdGVtX2NvZGUgaXMgYXNzaWduZWRcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Um93LnF1YW50aXR5ID0gcHJvZHVjdC5xdHkgfHwgMTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Um93LnJhdGUgPSBwcm9kdWN0LnJhdGUgfHwgMDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBc3NpZ24gZGV0YWlsZWQgcHJvZHVjdCBkYXRhIGlmIGRldGFpbHMgZXhpc3RcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvZHVjdC5kZXRhaWxzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdC5kZXRhaWxzLmZvckVhY2goZGV0YWlsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmltbWVkQ29sdW1uTmFtZSA9IGRldGFpbC5jb2x1bW5fbmFtZS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGFuZWxVc2VyQ29sdW1uRGlzcGxheU5hbWVzLmluY2x1ZGVzKHRyaW1tZWRDb2x1bW5OYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRSb3dbdHJpbW1lZENvbHVtbk5hbWVdID0gZGV0YWlsLmNvbHVtbl92YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEVuc3VyZSBhbGwgY29sdW1ucyBpbiBwYW5lbFVzZXJDb2x1bW5EaXNwbGF5TmFtZXMgYXJlIHBvcHVsYXRlZFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhbmVsVXNlckNvbHVtbkRpc3BsYXlOYW1lc1xuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihjb2x1bW5OYW1lID0+IGNvbHVtbk5hbWUudHJpbSgpICE9PSAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKGNvbHVtbk5hbWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyaW1tZWRDb2x1bW5OYW1lID0gY29sdW1uTmFtZS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2R1Y3RbdHJpbW1lZENvbHVtbk5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Um93W3RyaW1tZWRDb2x1bW5OYW1lXSA9IHByb2R1Y3RbdHJpbW1lZENvbHVtbk5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0b3RhbCBmb3IgdGhlIHRhcmdldCByb3dcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVRvdGFsKHRhcmdldFJvdyk7XG5cbiAgICAgICAgICAgICAgICAvLyBMb2cgdGhlIHVwZGF0ZWQgcm93IGZvciBkZWJ1Z2dpbmdcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnVXBkYXRlZCByb3c6JywgdGFyZ2V0Um93KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhZGRSb3coKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5wYW5lbFVzZXJDb2x1bW5EaXNwbGF5TmFtZXMsICdwYW5lbFVzZXJDb2x1bW5EaXNwbGF5TmFtZXMnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkeW5hbWljRmllbGRzID0gdGhpcy5wYW5lbFVzZXJDb2x1bW5EaXNwbGF5TmFtZXMucmVkdWNlKChhY2MsIGNvbHVtbk5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbk5hbWUgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NbY29sdW1uTmFtZV0gPSAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgICAgIH0sIHt9KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRpY0ZpZWxkcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbV9jb2RlOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBxdWFudGl0eTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgaXRlbV9jb2RlOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICByYXRlOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0YXg6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZVRheDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdG90YWw6IG51bGwsXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1JvdyA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uZHluYW1pY0ZpZWxkcyxcbiAgICAgICAgICAgICAgICAgICAgLi4uc3RhdGljRmllbGRzXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHRoaXMucm93cy5wdXNoKG5ld1Jvdyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld1JvdztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGFkZFNlbGVjdGVkUHJvZHVjdHMoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFByb2R1Y3RzLmZvckVhY2gocHJvZHVjdCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVtcHR5Um93ID0gdGhpcy5yb3dzLmZpbmQocm93ID0+ICFyb3cucXVhbnRpdHkgJiYgIXJvdy5yYXRlICYmICFyb3cuaXRlbV9jb2RlKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZW1wdHlSb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtcHR5Um93Lml0ZW1fY29kZSA9IHByb2R1Y3QuaXRlbV9jb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZW1wdHlSb3cucXVhbnRpdHkgPSBwcm9kdWN0LnF0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtcHR5Um93LnJhdGUgPSBwcm9kdWN0LnJhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbXB0eVJvdy50b3RhbCA9IHByb2R1Y3QucXR5ICogcHJvZHVjdC5yYXRlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3Um93ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1fY29kZTogcHJvZHVjdC5pdGVtX2NvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHk6IHByb2R1Y3QucXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdGU6IHByb2R1Y3QucmF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsY3VsYXRlVGF4OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsOiBwcm9kdWN0LnF0eSAqIHByb2R1Y3QucmF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm93cy5wdXNoKG5ld1Jvdyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGRlbGV0ZVJvdyhpbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMucm93cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVG90YWxzKCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjYWxjdWxhdGVUb3RhbChyb3cpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBxdWFudGl0eSA9IHBhcnNlRmxvYXQocm93LnF1YW50aXR5KSB8fCAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhdGUgPSBwYXJzZUZsb2F0KHJvdy5yYXRlKSB8fCAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRheCA9IHBhcnNlRmxvYXQocm93LnRheCkgfHwgMDtcblxuICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0b3RhbCB3aXRob3V0IHRheFxuICAgICAgICAgICAgICAgIGxldCB0b3RhbCA9IHF1YW50aXR5ICogcmF0ZTtcblxuICAgICAgICAgICAgICAgIC8vIEFwcGx5IHRheCBpZiBlbmFibGVkXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FsY3VsYXRlVGF4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsICs9ICh0b3RhbCAqIHRheCkgLyAxMDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2V0IHRvdGFsIGZvciB0aGUgcm93XG4gICAgICAgICAgICAgICAgcm93LnRvdGFsID0gdG90YWwudG9GaXhlZCgyKTtcblxuICAgICAgICAgICAgICAgIC8vIFJlY2FsY3VsYXRlIHRvdGFsc1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVG90YWxzKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcm93LnRvdGFsO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdG90YWxRdWFudGl0eSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yb3dzLnJlZHVjZSgoc3VtLCByb3cpID0+IHN1bSArIChwYXJzZUZsb2F0KHJvdy5xdWFudGl0eSkgfHwgMCksIDApO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdG90YWxBbW91bnRCZWZvcmVEaXNjb3VudCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yb3dzLnJlZHVjZSgoc3VtLCByb3cpID0+IHN1bSArIChwYXJzZUZsb2F0KHJvdy50b3RhbCkgfHwgMCksIDApO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdXBkYXRlVG90YWxzKCkge1xuICAgICAgICAgICAgICAgIC8vIFJlY2FsY3VsYXRlIHRoZSB0b3RhbCBxdWFudGl0eVxuICAgICAgICAgICAgICAgIHRoaXMudG90YWxRdHkgPSB0aGlzLnRvdGFsUXVhbnRpdHkoKTtcblxuICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0b3RhbCBhbW91bnQgYmVmb3JlIGFueSBkaXNjb3VudCBvciByb3VuZC1vZmZcbiAgICAgICAgICAgICAgICBsZXQgdG90YWxBbW91bnQgPSB0aGlzLnRvdGFsQW1vdW50QmVmb3JlRGlzY291bnQoKTtcblxuICAgICAgICAgICAgICAgIC8vIEFwcGx5IGdsb2JhbCBkaXNjb3VudFxuICAgICAgICAgICAgICAgIGNvbnN0IGRpc2NvdW50ID0gcGFyc2VGbG9hdCh0aGlzLmRpc2NvdW50KSB8fCAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc2NvdW50QW1vdW50ID0gKHRvdGFsQW1vdW50ICogZGlzY291bnQpIC8gMTAwO1xuICAgICAgICAgICAgICAgIHRvdGFsQW1vdW50IC09IGRpc2NvdW50QW1vdW50O1xuXG4gICAgICAgICAgICAgICAvLyBBcHBseSByb3VuZC1vZmYgaWYgZW5hYmxlZFxuICAgICAgICAgICAgICAgdGhpcy5yb3VuZE9mZkFtb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yb3VuZE9mZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm91bmRPZmZBbW91bnQgPSBNYXRoLnJvdW5kKHRvdGFsQW1vdW50KSAtIHRvdGFsQW1vdW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQW1vdW50ID0gTWF0aC5yb3VuZCh0b3RhbEFtb3VudCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy50b3RhbEFtb3VudCA9IHRvdGFsQW1vdW50LnRvRml4ZWQoMik7XG5cbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGF4IGJyZWFrZG93blxuICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVUYXhCcmVha2Rvd24oKTtcblxuICAgICAgICAgICAgICAgLy8gQ29udmVydCB0byB3b3Jkc1xuICAgICAgICAgICAgICAgdGhpcy50b3RhbEFtb3VudEluV29yZHMgPSB0aGlzLm51bWJlclRvSW5kaWFuUnVwZWVzKHRvdGFsQW1vdW50KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdlbmVyYXRlVGF4QnJlYWtkb3duKCkge1xuICAgICAgICAgICAgbGV0IGJyZWFrZG93biA9ICcnO1xuICAgICAgICAgICAgY29uc3QgZGlzY291bnQgPSBwYXJzZUZsb2F0KHRoaXMuZGlzY291bnQpIHx8IDA7XG4gICAgICAgICAgICBsZXQgc2hvd0JyZWFrZG93biA9IGZhbHNlO1xuXG4gICAgICAgICAgICAvLyBFbnN1cmUgc2VsZWN0ZWRVc2VyU3RhdGUgdXNlcyBhdXRoVXNlclN0YXRlIGlmIHVuZGVmaW5lZCBvciBlbXB0eVxuICAgICAgICAgICAgbGV0IHNlbGVjdGVkU3RhdGUgPSAodHlwZW9mIHNlbGVjdGVkVXNlclN0YXRlICE9PSAndW5kZWZpbmVkJyAmJiBzZWxlY3RlZFVzZXJTdGF0ZS50cmltKCkgIT09ICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHNlbGVjdGVkVXNlclN0YXRlLnRyaW0oKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5hdXRoVXNlclN0YXRlLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICBsZXQgYXV0aFN0YXRlID0gdGhpcy5hdXRoVXNlclN0YXRlLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgaWYgSUdTVCBzaG91bGQgYmUgYXBwbGllZFxuICAgICAgICAgICAgY29uc3QgYXBwbHlJR1NUID0gc2VsZWN0ZWRTdGF0ZSAhPT0gYXV0aFN0YXRlO1xuXG4gICAgICAgICAgICAvLyBBZ2dyZWdhdGUgZGF0YSBieSB0YXggcmF0ZVxuICAgICAgICAgICAgY29uc3QgdGF4RGF0YSA9IHt9O1xuXG4gICAgICAgICAgICB0aGlzLnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGF4UmF0ZSA9IHBhcnNlRmxvYXQocm93LnRheCkgfHwgMDtcbiAgICAgICAgICAgICAgICBpZiAodGF4UmF0ZSA9PT0gMCkgcmV0dXJuOyAvLyBTa2lwIHJvd3Mgd2l0aCB6ZXJvIHRheCByYXRlXG5cbiAgICAgICAgICAgICAgICBjb25zdCB0b3RhbFdpdGhvdXRUYXggPSBwYXJzZUZsb2F0KHJvdy50b3RhbCkgLyAoMSArICh0YXhSYXRlIC8gMTAwKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGlzY291bnRlZFRvdGFsID0gdG90YWxXaXRob3V0VGF4IC0gKHRvdGFsV2l0aG91dFRheCAqIGRpc2NvdW50KSAvIDEwMDtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXhBbW91bnQgPSBkaXNjb3VudGVkVG90YWwgKiAodGF4UmF0ZSAvIDEwMCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRheERhdGFbdGF4UmF0ZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGF4RGF0YVt0YXhSYXRlXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsV2l0aG91dFRheDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2NvdW50ZWRUb3RhbDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRheEFtb3VudDogMFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRheERhdGFbdGF4UmF0ZV0udG90YWxXaXRob3V0VGF4ICs9IHRvdGFsV2l0aG91dFRheDtcbiAgICAgICAgICAgICAgICB0YXhEYXRhW3RheFJhdGVdLmRpc2NvdW50ZWRUb3RhbCArPSBkaXNjb3VudGVkVG90YWw7XG4gICAgICAgICAgICAgICAgdGF4RGF0YVt0YXhSYXRlXS50YXhBbW91bnQgKz0gdGF4QW1vdW50O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBicmVha2Rvd24gSFRNTFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbdGF4UmF0ZSwgZGF0YV0gb2YgT2JqZWN0LmVudHJpZXModGF4RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzY291bnQgPiAwIHx8IGRhdGEudG90YWxXaXRob3V0VGF4ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93QnJlYWtkb3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtkb3duICs9IGBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cInRleHQteHMgdGV4dC1ibGFja1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cInRleHQtcmlnaHRcIj4ke3RoaXMuZ2V0RHluYW1pY1RleHQodGF4UmF0ZSl9ICR7dGF4UmF0ZX0lOjwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1yaWdodFwiPiR7ZGF0YS50b3RhbFdpdGhvdXRUYXgudG9GaXhlZCgyKX08L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7ZGlzY291bnQgPiAwID8gYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPVwidGV4dC14cyB0ZXh0LWJsYWNrXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1yaWdodFwiPkRpc2NvdW50IGF0ICR7ZGlzY291bnR9JTo8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cInRleHQtcmlnaHRcIj4keyhkYXRhLnRvdGFsV2l0aG91dFRheCAqIGRpc2NvdW50IC8gMTAwKS50b0ZpeGVkKDIpfTwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPVwidGV4dC14cyB0ZXh0LWJsYWNrXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1yaWdodCBmb250LWJvbGRcIj4ke3RoaXMuZ2V0RHluYW1pY1RleHQodGF4UmF0ZSl9ICR7ZGlzY291bnR9JTo8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cInRleHQtcmlnaHQgZm9udC1ib2xkXCI+JHtkYXRhLmRpc2NvdW50ZWRUb3RhbC50b0ZpeGVkKDIpfTwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCA6ICcnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtkYXRhLnRvdGFsV2l0aG91dFRheCA+IDAgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGx5SUdTVCA/IGBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XCJ0ZXh0LXhzIHRleHQtYmxhY2tcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1yaWdodFwiPklHU1QgJHt0YXhSYXRlfSU6PC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1yaWdodFwiPiR7ZGF0YS50YXhBbW91bnQudG9GaXhlZCgyKX08L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCA6IGBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XCJ0ZXh0LXhzIHRleHQtYmxhY2tcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1yaWdodFwiPlNHU1QgJHsodGF4UmF0ZSAvIDIpLnRvRml4ZWQoMil9JTo8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJ0ZXh0LXJpZ2h0XCI+JHsoZGF0YS50YXhBbW91bnQgLyAyKS50b0ZpeGVkKDIpfTwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XCJ0ZXh0LXhzIHRleHQtYmxhY2tcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1yaWdodFwiPkNHU1QgJHsodGF4UmF0ZSAvIDIpLnRvRml4ZWQoMil9JTo8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJ0ZXh0LXJpZ2h0XCI+JHsoZGF0YS50YXhBbW91bnQgLyAyKS50b0ZpeGVkKDIpfTwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPVwidGV4dC14cyB0ZXh0LWJsYWNrXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49XCIyXCIgc3R5bGU9XCJoZWlnaHQ6IDEwcHg7XCI+PC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgY2FzZSB3aGVyZSBvbmx5IGRpc2NvdW50IGlzIGFwcGxpZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXNjb3VudCA+IDAgJiYgT2JqZWN0LmtleXModGF4RGF0YSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0JyZWFrZG93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG90YWxBbW91bnRCZWZvcmVEaXNjb3VudCA9IHRoaXMudG90YWxBbW91bnRCZWZvcmVEaXNjb3VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrZG93biArPSBgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cInRleHQteHMgdGV4dC1ibGFja1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1yaWdodFwiPlRvdGFsIEFtb3VudDo8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1yaWdodFwiPiR7dG90YWxBbW91bnRCZWZvcmVEaXNjb3VudC50b0ZpeGVkKDIpfTwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cInRleHQteHMgdGV4dC1ibGFja1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1yaWdodFwiPkRpc2NvdW50IGF0ICR7ZGlzY291bnR9JTo8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1yaWdodFwiPiR7KHRvdGFsQW1vdW50QmVmb3JlRGlzY291bnQgKiBkaXNjb3VudCAvIDEwMCkudG9GaXhlZCgyKX08L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XCJ0ZXh0LXhzIHRleHQtYmxhY2tcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cInRleHQtcmlnaHQgZm9udC1ib2xkXCI+QW1vdW50IGF0ICR7ZGlzY291bnR9JTo8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1yaWdodCBmb250LWJvbGRcIj4keyh0b3RhbEFtb3VudEJlZm9yZURpc2NvdW50IC0gKHRvdGFsQW1vdW50QmVmb3JlRGlzY291bnQgKiBkaXNjb3VudCAvIDEwMCkpLnRvRml4ZWQoMil9PC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hvd0JyZWFrZG93bikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGF4QnJlYWtkb3duID0gYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9XCJ3LWZ1bGxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7YnJlYWtkb3dufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGF4QnJlYWtkb3duID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgY29udmVydE51bWJlclRvV29yZHMobnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JkcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwOiAnWmVybycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTogJ09uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMjogJ1R3bycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMzogJ1RocmVlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0OiAnRm91cicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgNTogJ0ZpdmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDY6ICdTaXgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDc6ICdTZXZlbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgODogJ0VpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA5OiAnTmluZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTA6ICdUZW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDExOiAnRWxldmVuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMjogJ1R3ZWx2ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTM6ICdUaGlydGVlbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTQ6ICdGb3VydGVlbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTU6ICdGaWZ0ZWVuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxNjogJ1NpeHRlZW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE3OiAnU2V2ZW50ZWVuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxODogJ0VpZ2h0ZWVuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxOTogJ05pbmV0ZWVuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMDogJ1R3ZW50eScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMzA6ICdUaGlydHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQwOiAnRm9ydHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUwOiAnRmlmdHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDYwOiAnU2l4dHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDcwOiAnU2V2ZW50eScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgODA6ICdFaWdodHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDkwOiAnTmluZXR5J1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bWJlciA8IDIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdvcmRzW251bWJlcl07XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDEwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbnMgPSB3b3Jkc1sxMCAqIE1hdGguZmxvb3IobnVtYmVyIC8gMTApXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1bml0cyA9IG51bWJlciAlIDEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZW5zICsgKHVuaXRzID8gJyAnICsgd29yZHNbdW5pdHNdIDogJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCAxMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaHVuZHJlZHMgPSB3b3Jkc1tNYXRoLmZsb29yKG51bWJlciAvIDEwMCldICsgJyBIdW5kcmVkJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZW1haW5kZXIgPSBudW1iZXIgJSAxMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGh1bmRyZWRzICsgKHJlbWFpbmRlciA/ICcgYW5kICcgKyB0aGlzLmNvbnZlcnROdW1iZXJUb1dvcmRzKHJlbWFpbmRlcikgOiAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDEwMDAwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRob3VzYW5kcyA9IHRoaXMuY29udmVydE51bWJlclRvV29yZHMoTWF0aC5mbG9vcihudW1iZXIgLyAxMDAwKSkgKyAnIFRob3VzYW5kJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZW1haW5kZXIgPSBudW1iZXIgJSAxMDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aG91c2FuZHMgKyAocmVtYWluZGVyID8gJyAnICsgdGhpcy5jb252ZXJ0TnVtYmVyVG9Xb3JkcyhyZW1haW5kZXIpIDogJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCAxMDAwMDAwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxha2hzID0gdGhpcy5jb252ZXJ0TnVtYmVyVG9Xb3JkcyhNYXRoLmZsb29yKG51bWJlciAvIDEwMDAwMCkpICsgJyBMYWtoJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZW1haW5kZXIgPSBudW1iZXIgJSAxMDAwMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxha2hzICsgKHJlbWFpbmRlciA/ICcgJyArIHRoaXMuY29udmVydE51bWJlclRvV29yZHMocmVtYWluZGVyKSA6ICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3JvcmVzID0gdGhpcy5jb252ZXJ0TnVtYmVyVG9Xb3JkcyhNYXRoLmZsb29yKG51bWJlciAvIDEwMDAwMDAwKSkgKyAnIENyb3JlJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZW1haW5kZXIgPSBudW1iZXIgJSAxMDAwMDAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JvcmVzICsgKHJlbWFpbmRlciA/ICcgJyArIHRoaXMuY29udmVydE51bWJlclRvV29yZHMocmVtYWluZGVyKSA6ICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBudW1iZXJUb0luZGlhblJ1cGVlcyhudW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFtb3VudEluV29yZHMgPSB0aGlzLmNvbnZlcnROdW1iZXJUb1dvcmRzKE1hdGguZmxvb3IobnVtYmVyKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWNpbWFsUGFydCA9IE1hdGgucm91bmQoKG51bWJlciAtIE1hdGguZmxvb3IobnVtYmVyKSkgKiAxMDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVjaW1hbFBhcnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVjaW1hbEluV29yZHMgPSB0aGlzLmNvbnZlcnROdW1iZXJUb1dvcmRzKGRlY2ltYWxQYXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYW1vdW50SW5Xb3JkcyArICcgUnVwZWVzIGFuZCAnICsgZGVjaW1hbEluV29yZHMgKyAnIFBhaXNhJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFtb3VudEluV29yZHMgKyAnIFJ1cGVlcyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQXJ0aWNsZShyb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcm93LkFydGljbGUgfHwgcm93LkFydGljbGUudHJpbSgpID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXJ0aWNsZUVycm9yc1tyb3cuaWRdID0gJ1JlcXVpcmVkJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuYXJ0aWNsZUVycm9yc1tyb3cuaWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlUmF0ZShyb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcm93LnJhdGUgfHwgaXNOYU4ocGFyc2VGbG9hdChyb3cucmF0ZSkpIHx8IHBhcnNlRmxvYXQocm93LnJhdGUpIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJhdGVFcnJvcnNbcm93LmlkXSA9ICdSZXF1aXJlZCc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnJhdGVFcnJvcnNbcm93LmlkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZVJvdyhyb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdGVBcnRpY2xlKHJvdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlUmF0ZShyb3cpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQWxsUm93cygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm93cy5mb3JFYWNoKHJvdyA9PiB0aGlzLnZhbGlkYXRlUm93KHJvdykpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBpc0Zvcm1WYWxpZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmFydGljbGVFcnJvcnMpLmxlbmd0aCA9PT0gMCAmJiBPYmplY3Qua2V5cyh0aGlzLnJhdGVFcnJvcnMpLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBkcmFmdERhdGEoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWREYXRhID0gdGhpcy5yb3dzLm1hcChyb3cgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbHVtbnMgPSBPYmplY3QuZW50cmllcyhyb3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKFtrZXksIF9dKSA9PiB0aGlzLnBhbmVsVXNlckNvbHVtbkRpc3BsYXlOYW1lcy5pbmNsdWRlcyhrZXkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKChba2V5LCB2YWx1ZV0pID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5fbmFtZToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uX3ZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwX2lkOiByb3cuaXRlbV9jb2RlIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0OiByb3cudW5pdCB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXRlOiBwYXJzZUZsb2F0KHJvdy5yYXRlKSB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdHk6IHBhcnNlRmxvYXQocm93LnF1YW50aXR5KSB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3VuZF9vZmY6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2NvdW50OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbF9hbW91bnQ6IHBhcnNlRmxvYXQocm93LnRvdGFsKSB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXhfcGVyY2VudGFnZTogcGFyc2VGbG9hdChyb3cudGF4KSB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNjb3VudF90b3RhbF9hbW91bnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRheF9hbW91bnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRheDogcGFyc2VGbG9hdChyb3cudGF4KSB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtX2NvZGU6IHJvdy5pdGVtX2NvZGUgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uczogY29sdW1uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3REYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyX2RldGFpbHM6IGZvcm1hdHRlZERhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxfcXR5OiB0aGlzLnRvdGFsUXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsOiB0aGlzLnRvdGFsQW1vdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2NvdW50X3RvdGFsX2Ftb3VudDogdGhpcy5kaXNjb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHdpcmUuZHJhZnRSb3dzKHJlcXVlc3REYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN1Ym1pdERhdGEoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVkRGF0YSA9IHRoaXMucm93cy5tYXAocm93ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sdW1ucyA9IE9iamVjdC5lbnRyaWVzKHJvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKFtrZXksIF9dKSA9PiB0aGlzLnBhbmVsVXNlckNvbHVtbkRpc3BsYXlOYW1lcy5pbmNsdWRlcyhrZXkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbl9uYW1lOiBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uX3ZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwX2lkOiByb3cuaXRlbV9jb2RlIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdW5pdDogcm93LnVuaXQgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdGU6IHBhcnNlRmxvYXQocm93LnJhdGUpIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBxdHk6IHBhcnNlRmxvYXQocm93LnF1YW50aXR5KSB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm91bmRfb2ZmOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzY291bnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbF9hbW91bnQ6IHBhcnNlRmxvYXQocm93LnRvdGFsKSB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGF4X3BlcmNlbnRhZ2U6IHBhcnNlRmxvYXQocm93LnRheCkgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2NvdW50X3RvdGFsX2Ftb3VudDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRheF9hbW91bnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXg6IHBhcnNlRmxvYXQocm93LnRheCkgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1fY29kZTogcm93Lml0ZW1fY29kZSB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uczogY29sdW1uc1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdERhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIG9yZGVyX2RldGFpbHM6IGZvcm1hdHRlZERhdGEsXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsX3F0eTogdGhpcy50b3RhbFF0eSxcbiAgICAgICAgICAgICAgICAgICAgdG90YWw6IHRoaXMudG90YWxBbW91bnQsXG4gICAgICAgICAgICAgICAgICAgIGRpc2NvdW50X3RvdGFsX2Ftb3VudDogdGhpcy5kaXNjb3VudFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB0aGlzLiR3aXJlLnNhdmVSb3dzKHJlcXVlc3REYXRhKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGVkaXREYXRhKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZERhdGEgPSB0aGlzLnJvd3MubWFwKHJvdyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbHVtbnMgPSBPYmplY3QuZW50cmllcyhyb3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChba2V5LCBfXSkgPT4gdGhpcy5wYW5lbFVzZXJDb2x1bW5EaXNwbGF5TmFtZXMuaW5jbHVkZXMoa2V5KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKFtrZXksIHZhbHVlXSkgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5fbmFtZToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbl92YWx1ZTogdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcF9pZDogcm93Lml0ZW1fY29kZSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICByYXRlOiBwYXJzZUZsb2F0KHJvdy5yYXRlKSB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXR5OiBwYXJzZUZsb2F0KHJvdy5xdWFudGl0eSkgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdW5kX29mZjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2NvdW50OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxfYW1vdW50OiBwYXJzZUZsb2F0KHJvdy50b3RhbCkgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRheF9wZXJjZW50YWdlOiBwYXJzZUZsb2F0KHJvdy50YXgpIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNjb3VudF90b3RhbF9hbW91bnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXhfYW1vdW50OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGF4OiBwYXJzZUZsb2F0KHJvdy50YXgpIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtX2NvZGU6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zOiBjb2x1bW5zXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0RGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgb3JkZXJfZGV0YWlsczogZm9ybWF0dGVkRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgdG90YWxfcXR5OiB0aGlzLnRvdGFsUXR5LFxuICAgICAgICAgICAgICAgICAgICB0b3RhbDogdGhpcy50b3RhbEFtb3VudCxcbiAgICAgICAgICAgICAgICAgICAgZGlzY291bnRfdG90YWxfYW1vdW50OiB0aGlzLmRpc2NvdW50XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHRoaXMuJHdpcmUuZWRpdFJvd3MocmVxdWVzdERhdGEpO1xuICAgICAgICAgICAgfSxcblxuXG4gICAgICAgICAgICAgLy8gVXBkYXRlZCBhZGRTZWxlY3RlZERhdGFUb0lucHV0cyBmb3IgbXVsdGlwbGUgc2VsZWN0XG4gICAgICAgIGFkZFNlbGVjdGVkRGF0YVRvSW5wdXRzKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNoZWNrZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ05vIGl0ZW1zIHNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBQcm9jZXNzIGVhY2ggY2hlY2tlZCBpdGVtXG4gICAgICAgICAgICB0aGlzLmNoZWNrZWQuZm9yRWFjaChjaGVja2VkSXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvZHVjdERhdGEgPSBKU09OLnBhcnNlKGNoZWNrZWRJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1Byb2Nlc3NpbmcgcHJvZHVjdDonLCBwcm9kdWN0RGF0YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgcHJvZHVjdCBhbHJlYWR5IGV4aXN0c1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0Um93ID0gdGhpcy5yb3dzLmZpbmQocm93ID0+IHJvdy5pdGVtX2NvZGUgPT09IHByb2R1Y3REYXRhLml0ZW1fY29kZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFJvdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFByb2R1Y3QgJHtwcm9kdWN0RGF0YS5pdGVtX2NvZGV9IGFscmVhZHkgZXhpc3RzLCBza2lwcGluZ2ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRmluZCBlbXB0eSByb3cgb3IgY3JlYXRlIG5ldyBvbmVcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Um93ID0gdGhpcy5yb3dzLmZpbmQocm93ID0+ICFyb3cuaXRlbV9jb2RlICYmICFyb3cucXVhbnRpdHkgJiYgIXJvdy5yYXRlKSB8fCB0aGlzLmFkZFJvdygpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEJhc2ljIGRhdGEgYXNzaWdubWVudFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRSb3cuaXRlbV9jb2RlID0gcHJvZHVjdERhdGEuaXRlbV9jb2RlO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRSb3cucXVhbnRpdHkgPSBwcm9kdWN0RGF0YS5xdHkgfHwgMTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Um93LnJhdGUgPSBwcm9kdWN0RGF0YS5yYXRlIHx8IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUHJvY2VzcyBkZXRhaWxlZCBwcm9kdWN0IGRhdGFcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvZHVjdERhdGEuZGV0YWlscykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3REYXRhLmRldGFpbHMuZm9yRWFjaChkZXRhaWwgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyaW1tZWRDb2x1bW5OYW1lID0gZGV0YWlsLmNvbHVtbl9uYW1lLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wYW5lbFVzZXJDb2x1bW5EaXNwbGF5TmFtZXMuaW5jbHVkZXModHJpbW1lZENvbHVtbk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFJvd1t0cmltbWVkQ29sdW1uTmFtZV0gPSBkZXRhaWwuY29sdW1uX3ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRW5zdXJlIGFsbCBwYW5lbCBjb2x1bW5zIGFyZSBwb3B1bGF0ZWRcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYW5lbFVzZXJDb2x1bW5EaXNwbGF5TmFtZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoY29sdW1uTmFtZSA9PiBjb2x1bW5OYW1lLnRyaW0oKSAhPT0gJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZm9yRWFjaChjb2x1bW5OYW1lID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmltbWVkQ29sdW1uTmFtZSA9IGNvbHVtbk5hbWUudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9kdWN0RGF0YVt0cmltbWVkQ29sdW1uTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRSb3dbdHJpbW1lZENvbHVtbk5hbWVdID0gcHJvZHVjdERhdGFbdHJpbW1lZENvbHVtbk5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSB1bml0IGFzc2lnbm1lbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb2R1Y3REYXRhLnVuaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVuaXRTaG9ydE5hbWUgPSBwcm9kdWN0RGF0YS51bml0LnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy51bml0cy5sZW5ndGggPT09IDAgfHwgIXRoaXMudW5pdHMuc29tZSh1bml0ID0+IHVuaXQuc2hvcnRfbmFtZSA9PT0gdW5pdFNob3J0TmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVuaXRzLnB1c2goeyBzaG9ydF9uYW1lOiB1bml0U2hvcnROYW1lLCB1bml0OiBwcm9kdWN0RGF0YS51bml0IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Um93LnVuaXQgPSB1bml0U2hvcnROYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRvdGFsc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVRvdGFsKHRhcmdldFJvdyk7XG5cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwcm9jZXNzaW5nIHByb2R1Y3Q6JywgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBDbGVhciBzZWxlY3Rpb25zIGFuZCB1cGRhdGUgVUlcbiAgICAgICAgICAgIHRoaXMuY2hlY2tlZCA9IFtdO1xuICAgICAgICAgICAgdGhpcy5hbGxDaGVja2VkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdFBhZ2UgPSBmYWxzZTtcblxuICAgICAgICAgICAgLy8gRm9yY2UgcmUtcmVuZGVyXG4gICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yb3dzID0gWy4uLnRoaXMucm93c107XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVUb3RhbHMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAgLy8gSGVscGVyIG1ldGhvZCB0byBoYW5kbGUgaW5kaXZpZHVhbCBjaGVja2JveCBjaGFuZ2VzXG4gICAgICAgICBoYW5kbGVDaGVja2JveENoYW5nZShldmVudCwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jaGVja2VkLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWQgPSB0aGlzLmNoZWNrZWQuZmlsdGVyKGl0ZW0gPT4gaXRlbSAhPT0gdmFsdWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWxsQ2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgYWxsQ2hlY2tlZCBzdGF0ZSBiYXNlZCBvbiBpZiBhbGwgY2hlY2tib3hlcyBhcmUgY2hlY2tlZFxuICAgICAgICAgICAgY29uc3QgY2hlY2tib3hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcm9kdWN0LWNoZWNrYm94Jyk7XG4gICAgICAgICAgICB0aGlzLmFsbENoZWNrZWQgPSBBcnJheS5mcm9tKGNoZWNrYm94ZXMpLmV2ZXJ5KGNoZWNrYm94ID0+IGNoZWNrYm94LmNoZWNrZWQpO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgICAgIGxvZ1Byb2R1Y3REYXRhKCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMucHJvZHVjdERhdGEpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2VuZERhdGEoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dQcm9kdWN0RGF0YSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0RmllbGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZHVjdERhdGFJbnB1dCcpO1xuICAgICAgICAgICAgICAgIGlucHV0RmllbGQudmFsdWUgPSBKU09OLnN0cmluZ2lmeSh0aGlzLnByb2R1Y3REYXRhKTtcbiAgICAgICAgICAgIH0sXG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6WyJpbnZvaWNlQ29tcG9uZW50IiwiYXV0aFVzZXJTdGF0ZUZyb21TZXJ2ZXIiLCJwYW5lbFVzZXJDb2x1bW5EaXNwbGF5TmFtZXMiLCJyb3dzRnJvbVNlcnZlciIsImNvbnRleHQiLCJzZWxlY3RVc2VyRnJvbUxpdmV3aXJlIiwidW5pdHNGcm9tU2VydmVyIiwiY29uc29sZSIsImxvZyIsInJvd3MiLCJwcm9kdWN0Q29kZSIsImF1dGhVc2VyU3RhdGUiLCJzZWxlY3RVc2VyIiwiY2FsY3VsYXRlVGF4IiwiZGlzY291bnQiLCJyb3VuZE9mZiIsInRheEJyZWFrZG93biIsInNlbGVjdGVkUHJvZHVjdHMiLCJ0b3RhbEFtb3VudEluV29yZHMiLCJ0b3RhbFF0eSIsInRvdGFsQW1vdW50Iiwicm91bmRPZmZBbW91bnQiLCJzaG93QWxlcnQiLCJiYXJjb2RlIiwicHJvZHVjdERhdGEiLCJjaGVja2VkIiwiaW5wdXRzRGlzYWJsZWQiLCJhcnRpY2xlRXJyb3IiLCJhcnRpY2xlRXJyb3JNZXNzYWdlIiwicmF0ZUVycm9yIiwiYXJ0aWNsZUVycm9ycyIsInJhdGVFcnJvcnMiLCJyYXRlRXJyb3JNZXNzYWdlIiwidW5pdHMiLCJhbGxDaGVja2VkIiwic2VsZWN0UGFnZSIsInNlbGVjdEFsbCIsInRvZ2dsZUFsbCIsIl90aGlzIiwiY2hlY2tib3hlcyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJjaGVja2JveCIsImluY2x1ZGVzIiwidmFsdWUiLCJwdXNoIiwiZmlsdGVyIiwiaXRlbSIsInNlbGVjdFVzZXJGcm9tT3RoZXJzIiwic2VsZWN0ZWRVc2VyU3RhdGUiLCJnZXREeW5hbWljVGV4dCIsInRheFJhdGUiLCJpbml0IiwiX3RoaXMyIiwiTGl2ZXdpcmUiLCJvbiIsInByb2R1Y3QiLCJhZGRQcm9kdWN0VG9Sb3ciLCJyZWluaXRpYWxpemVBbHBpbmUiLCJhZGRFdmVudExpc3RlbmVyIiwiaG9vayIsIm1lc3NhZ2UiLCJjb21wb25lbnQiLCJlbCIsImlkIiwiQWxwaW5lIiwiaW5pdGlhbGl6ZUNvbXBvbmVudCIsImV2ZW50IiwidGFyZ2V0IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJoYW5kbGVDaGVja2JveENoYW5nZSIsInJlaW5pdGlhbGl6ZUNvbXBvbmVudCIsIl90aGlzMyIsIiRuZXh0VGljayIsIl90b0NvbnN1bWFibGVBcnJheSIsInVwZGF0ZVRvdGFscyIsIl90aGlzNCIsInRhcmdldFJvdyIsImZpbmQiLCJyb3ciLCJpdGVtX2NvZGUiLCJxdWFudGl0eSIsInF0eSIsInJhdGUiLCJBcnJheSIsImlzQXJyYXkiLCJkZXRhaWxzIiwiZGV0YWlsIiwidHJpbW1lZENvbHVtbk5hbWUiLCJjb2x1bW5fbmFtZSIsInRyaW0iLCJ0cmltbWVkUGFuZWxDb2x1bW5OYW1lcyIsIm1hcCIsIm5hbWUiLCJjb2x1bW5fdmFsdWUiLCJhZGRSb3ciLCJjb2x1bW5OYW1lIiwidW5kZWZpbmVkIiwiY2FsY3VsYXRlVG90YWwiLCJkeW5hbWljRmllbGRzIiwicmVkdWNlIiwiYWNjIiwic3RhdGljRmllbGRzIiwiX2RlZmluZVByb3BlcnR5IiwibmV3Um93IiwiX29iamVjdFNwcmVhZCIsImFkZFNlbGVjdGVkUHJvZHVjdHMiLCJfdGhpczUiLCJlbXB0eVJvdyIsInRvdGFsIiwidGF4IiwiZGVsZXRlUm93IiwiaW5kZXgiLCJzcGxpY2UiLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsInRvdGFsUXVhbnRpdHkiLCJzdW0iLCJ0b3RhbEFtb3VudEJlZm9yZURpc2NvdW50IiwiZGlzY291bnRBbW91bnQiLCJNYXRoIiwicm91bmQiLCJnZW5lcmF0ZVRheEJyZWFrZG93biIsIm51bWJlclRvSW5kaWFuUnVwZWVzIiwiYnJlYWtkb3duIiwic2hvd0JyZWFrZG93biIsInNlbGVjdGVkU3RhdGUiLCJ0b0xvd2VyQ2FzZSIsImF1dGhTdGF0ZSIsImFwcGx5SUdTVCIsInRheERhdGEiLCJ0b3RhbFdpdGhvdXRUYXgiLCJkaXNjb3VudGVkVG90YWwiLCJ0YXhBbW91bnQiLCJfaSIsIl9PYmplY3QkZW50cmllcyIsIk9iamVjdCIsImVudHJpZXMiLCJsZW5ndGgiLCJfT2JqZWN0JGVudHJpZXMkX2kiLCJfc2xpY2VkVG9BcnJheSIsImRhdGEiLCJjb25jYXQiLCJrZXlzIiwiY29udmVydE51bWJlclRvV29yZHMiLCJudW1iZXIiLCJ3b3JkcyIsInRlbnMiLCJmbG9vciIsImh1bmRyZWRzIiwicmVtYWluZGVyIiwidGhvdXNhbmRzIiwibGFraHMiLCJjcm9yZXMiLCJhbW91bnRJbldvcmRzIiwiZGVjaW1hbFBhcnQiLCJkZWNpbWFsSW5Xb3JkcyIsInZhbGlkYXRlQXJ0aWNsZSIsIkFydGljbGUiLCJ2YWxpZGF0ZVJhdGUiLCJpc05hTiIsInZhbGlkYXRlUm93IiwidmFsaWRhdGVBbGxSb3dzIiwiX3RoaXM2IiwiaXNGb3JtVmFsaWQiLCJkcmFmdERhdGEiLCJfdGhpczciLCJmb3JtYXR0ZWREYXRhIiwiY29sdW1ucyIsIl9yZWYiLCJfcmVmMiIsImtleSIsIl8iLCJfcmVmMyIsIl9yZWY0IiwicF9pZCIsInVuaXQiLCJyb3VuZF9vZmYiLCJ0b3RhbF9hbW91bnQiLCJ0YXhfcGVyY2VudGFnZSIsImRpc2NvdW50X3RvdGFsX2Ftb3VudCIsInRheF9hbW91bnQiLCJyZXF1ZXN0RGF0YSIsIm9yZGVyX2RldGFpbHMiLCJ0b3RhbF9xdHkiLCIkd2lyZSIsImRyYWZ0Um93cyIsInN1Ym1pdERhdGEiLCJfdGhpczgiLCJfcmVmNSIsIl9yZWY2IiwiX3JlZjciLCJfcmVmOCIsInNhdmVSb3dzIiwiZWRpdERhdGEiLCJfdGhpczkiLCJfcmVmOSIsIl9yZWYxMCIsIl9yZWYxMSIsIl9yZWYxMiIsImVkaXRSb3dzIiwiYWRkU2VsZWN0ZWREYXRhVG9JbnB1dHMiLCJfdGhpczEwIiwiY2hlY2tlZEl0ZW0iLCJKU09OIiwicGFyc2UiLCJ1bml0U2hvcnROYW1lIiwidG9VcHBlckNhc2UiLCJzb21lIiwic2hvcnRfbmFtZSIsImVycm9yIiwiZnJvbSIsImV2ZXJ5IiwibG9nUHJvZHVjdERhdGEiLCJzZW5kRGF0YSIsImlucHV0RmllbGQiLCJnZXRFbGVtZW50QnlJZCIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/components/invoiceComponent.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/components/invoiceComponent.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;